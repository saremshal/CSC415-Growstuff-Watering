class ChecklistsController < ApplicationController
  before_action :set_checklist, only: [:show, :edit, :update, :destroy]

  # Generated by Rails
  # GET /checklists
  def index
    @checklists = Checklist.all
  end

  # Generated by Rails
  # GET /checklists/1
  def show
  end

  # Generated by Rails
  # GET /checklists/new
  def new
    @checklist = Checklist.new
  end

  # Generated by Rails
  # GET /checklists/1/edit
  def edit
  end

  # Edited By Sarem Shalforoosh
  # POST /checklists
  # [brief] When a new checklist is created, it will save today's date and make the next watered date
  # [param in] MemberID, PlantID, PlantName, Checklistflag
  # [param out] Completed checklist object
  def create
    # Makes new instance of the Object
    @checklist = Checklist.new(checklist_params)
    # Adjust Dates for object
    @checklist.lastWatered = Date.today
    @checklist.nextWatered = Date.today + 3.days

    # Saves Object
    if @checklist.save
      redirect_to checklists_url, notice: 'Checklist was successfully created.'
    else
      render :new
    end
  end

  # Edited by Sarem Shalforoosh
  # PATCH/PUT /checklists/1
  # [brief] Updates the object base on the parameters the user gave
  # [param in] Changed lastWatered OR changed checklistflag
  # [param out] Updated checklist object
  def update
    # Grabs last instance of checklist flag
    oldLastWatered = @checklist.lastWatered
    # Updates Object with user given parameters
    @checklist.update(checklist_params)

    # Checks if the user updated last watered
    if (oldLastWatered == @checklist.lastWatered)
      # If they did not change last watered, then the user checked/unchecked a checklist flag and it must verify if any action is needed
      # Checks to see if the user ticks the checkbox and if the plant needs to be watered
      if (@checklist.checklistFlag == true) && (Date.today >= @checklist.nextWatered)
        # If the above is true, then it changes the last watered date to today and updates nextwatered
        @checklist.lastWatered = Date.today
        @checklist.nextWatered = @checklist.lastWatered + 3.days
       # Checks to see if the user unticks the checkbox and if the plant does not need to be watered
       elsif (@checklist.checklistFlag == false) && (Date.today < @checklist.nextWatered)
        # If the above is true, then it changes the next watered date to today and updates lastwatered
        @checklist.nextWatered = Date.today
        @checklist.lastWatered = @checklist.nextWatered - 3.days
      end
    else
      # If they did update last watered, then the user changed the last water date and it needs to be adjusted accordingly
      # Adjust nextwatered to match the new value of lastWatered
      @checklist.nextWatered = @checklist.lastWatered + 3.days
      # Checks to see what value checklistflag should have
      if (Date.today >= @checklist.nextWatered)
        # If plant does need to be water then its false
        @checklist.checklistFlag = false
      else
        # If plant does not need to be water then its true
        @checklist.checklistFlag = true
      end
    end

    # Generated by Rails
    # Updates Object
    if @checklist.update(checklist_params)
      redirect_to checklists_url, notice: 'Checklist was successfully updated.'
    else
      render :edit
    end
  end

  # Generated by Rails
  # DELETE /checklists/1
  def destroy
    @checklist.destroy
    redirect_to checklists_url, notice: 'Checklist was successfully destroyed.'
  end

  private
    # Generated by Rails
    # Use callbacks to share common setup or constraints between actions.
    def set_checklist
      @checklist = Checklist.find(params[:id])
    end


    # Generated by Rails
    # Only allow a trusted parameter "white list" through.
    def checklist_params
      params.require(:checklist).permit(:memberID, :plantID, :plantName, :checklistFlag, :nextWatered, :lastWatered)
    end
end
